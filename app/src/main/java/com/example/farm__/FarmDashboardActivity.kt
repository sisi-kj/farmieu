//package com.example.farm__
//
//import android.os.Bundle
//import android.widget.TextView
//import androidx.appcompat.app.AppCompatActivity
//import com.google.firebase.auth.FirebaseAuth
//import com.google.firebase.firestore.FirebaseFirestore
//import android.graphics.Color
//import android.widget.ProgressBar
//class FarmDashboardActivity : AppCompatActivity() {
//
//
//    private lateinit var tvFarmName: TextView
//    private val db = FirebaseFirestore.getInstance()
//    private val auth = FirebaseAuth.getInstance()
//
//    private lateinit var tvTemperature: TextView
//    private lateinit var pbTemperature: ProgressBar
//
//    override fun onCreate(savedInstanceState: Bundle?) {
//        super.onCreate(savedInstanceState)
//        setContentView(R.layout.activity_farm_dashboard)
//        val email = FirebaseAuth.getInstance().currentUser?.email ?: return
//
//        val db = FirebaseFirestore.getInstance()
//        val tvFarmName = findViewById<TextView>(R.id.tvFarmName)
//
//        db.collection("users")
//            .document(email)
//            .get()
//            .addOnSuccessListener { snapshot ->
//                val farmName = snapshot.getString("farmName") ?: "ÎÇ¥ Ïä§ÎßàÌä∏Ìåú"
//                tvFarmName.text = farmName
//            }
//            .addOnFailureListener {
//                tvFarmName.text = "Ïä§ÎßàÌä∏Ìåú Ï†ïÎ≥¥ ÏóÜÏùå"
//            }
//
//
////        // üîπ Firebase Ï¥àÍ∏∞Ìôî
////        auth = FirebaseAuth.getInstance()
////        db = FirebaseFirestore.getInstance()
//
//        // üîπ Î∑∞ Ï¥àÍ∏∞Ìôî
//        tvTemperature = findViewById(R.id.tvTemperature)
//        pbTemperature = findViewById(R.id.pbTemperature)
//
//        // üîπ FirestoreÏóêÏÑú Ïã§ÏãúÍ∞Ñ Ïò®ÎèÑ Íµ¨ÎèÖ
//        val uid = auth.currentUser?.uid ?: return
//
//        db.collection("users")
//            .document(uid)
//            .collection("sensors")
//            .document("latest")
//            .addSnapshotListener { snapshot, error ->
//                if (error != null || snapshot == null || !snapshot.exists()) return@addSnapshotListener
//
//                val temperature = snapshot.getDouble("temperature") ?: return@addSnapshotListener
//                updateTemperatureUI(temperature)
//            }
//    }
//
//    private fun updateTemperatureUI(temp: Double) {
//        val progress = temp.toInt().coerceIn(0, 50)
//        pbTemperature.progress = progress
//        tvTemperature.text = "Ïò®ÎèÑ: ${"%.1f".format(temp)}¬∞C"
//
//        val color = when {
//            temp < 10 -> Color.parseColor("#42A5F5") // ÌååÎûë
//            temp < 25 -> Color.parseColor("#66BB6A") // Ï¥àÎ°ù
//            else -> Color.parseColor("#EF5350") // Îπ®Í∞ï
//        }
//
//        pbTemperature.progressTintList = android.content.res.ColorStateList.valueOf(color)
//    }
////    override fun onCreate(savedInstanceState: Bundle?) {
////        super.onCreate(savedInstanceState)
////        setContentView(R.layout.activity_farm_dashboard)
////
////        tvFarmName = findViewById(R.id.tvFarmName)
////
////        val uid = auth.currentUser?.uid ?: return
////
////        db.collection("users").document(uid).get()
////            .addOnSuccessListener { doc ->
////                val farmName = doc.getString("farmName") ?: "ÎÇ¥ Ìåú"
////                tvFarmName.text = farmName
////            }
////    }
//
//}
package com.example.farm__

import android.content.Intent
import android.content.res.ColorStateList
import android.graphics.Color
import android.os.Bundle
import android.widget.Button
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import android.widget.ImageView
import com.bumptech.glide.Glide
import com.google.firebase.firestore.Query
import android.graphics.BitmapFactory
import android.util.Base64
import android.graphics.Bitmap
import android.util.Log
import android.os.Handler
import android.os.Looper
import com.google.firebase.Timestamp
import java.text.SimpleDateFormat
import java.util.*
import android.content.BroadcastReceiver
import android.content.Context
import android.content.IntentFilter
import android.content.Context.RECEIVER_NOT_EXPORTED


import androidx.appcompat.app.AlertDialog



class FarmDashboardActivity : AppCompatActivity() {

    private lateinit var tvFarmName: TextView
    private lateinit var tvTemperature: TextView
    private lateinit var pbTemperature: ProgressBar
    private lateinit var tvHumidity: TextView
    private lateinit var pbHumidity: ProgressBar
    private lateinit var tvSoil: TextView
    private lateinit var pbSoil: ProgressBar
    private lateinit var tvLight: TextView
    private lateinit var pbLight: ProgressBar
    private lateinit var auth: FirebaseAuth
    private val email: String by lazy {
        FirebaseAuth.getInstance().currentUser?.email ?: ""
    }
    private lateinit var imgLatestPhoto: ImageView
    private var photoCopyHandler: Handler? = null
    private var photoCopyRunnable: Runnable? = null
    private lateinit var tvPumpStatus: TextView
    private lateinit var btnPumpIndicator: Button




    private lateinit var db: FirebaseFirestore
    private fun base64ToBitmap(base64Str: String): Bitmap {
        val decodedBytes = Base64.decode(base64Str, Base64.DEFAULT)
        return BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.size)
    }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_farm_dashboard)
        val btnLogout = findViewById<Button>(R.id.btnLogout)

        btnLogout.setOnClickListener {
            FirebaseAuth.getInstance().signOut()
            Toast.makeText(this, "Î°úÍ∑∏ÏïÑÏõÉ ÎêòÏóàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            startActivity(Intent(this, LoginActivity::class.java))
            finish()
        }
        // üîπ Firebase Ï¥àÍ∏∞Ìôî
        auth = FirebaseAuth.getInstance()
        db = FirebaseFirestore.getInstance()
        val imgLatestPhoto = findViewById<ImageView>(R.id.imgLatestPhoto)
        //val email = auth.currentUser?.email ?: return

        //imgLatestPhoto = findViewById(R.id.imgLatestPhoto)
        startPollingLatestPhoto()
        schedulePhotoCopyAtUserTime()
        val reloadReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                if (intent?.action == "RELOAD_PHOTO_TIMER") {
                    schedulePhotoCopyAtUserTime()
                }
            }
        }

// Android 13 Ïù¥ÏÉÅÏóêÏÑú Î∞òÎìúÏãú export Ïó¨Î∂Ä ÏßÄÏ†ï ÌïÑÏöî!
        registerReceiver(reloadReceiver, IntentFilter("RELOAD_PHOTO_TIMER"), RECEIVER_NOT_EXPORTED)





        db.collection("users").document(email)
            .collection("photos")
            .orderBy("timestamp", Query.Direction.DESCENDING)
            .limit(1)
            .get()
            .addOnSuccessListener { docs ->
                if (!docs.isEmpty) {
                    val base64 = docs.first().getString("imageBase64")
                    base64?.let {
                        // üîπ base64 Î¨∏ÏûêÏó¥ Ï†ïÎ¶¨: Ï§ÑÎ∞îÍøà Ï†úÍ±∞ + null Î∞©ÏßÄ
                        val pureBase64 = it.substringAfter("base64,", "").replace("\\s".toRegex(), "")
                        if (pureBase64.isNotBlank()) {
                            try {
                                val bitmap = base64ToBitmap(pureBase64)
                                imgLatestPhoto.setImageBitmap(bitmap)
                            } catch (e: Exception) {
                                e.printStackTrace()
                                Toast.makeText(this, "Ïù¥ÎØ∏ÏßÄÎ•º ÎîîÏΩîÎî©Ìï† Ïàò ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
                            }
                        } else {
                            Log.e("FarmDashboard", "Base64 Î¨∏ÏûêÏó¥Ïù¥ ÎπÑÏñ¥ ÏûàÍ±∞ÎÇò ÏûòÎ™ªÎê®")
                        }
                    }
                } else {
                    Log.d("FarmDashboard", "ÏÇ¨ÏßÑ Î¨∏ÏÑú ÏóÜÏùå")
                }
            }
            .addOnFailureListener {
                Log.e("FarmDashboard", "Firestore Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®: ${it.message}")
            }


        imgLatestPhoto.setOnClickListener {
            startActivity(Intent(this, PhotoGalleryActivity::class.java))
        }




        // üîπ Î∑∞ Ï¥àÍ∏∞Ìôî
        tvFarmName = findViewById(R.id.tvFarmName)
        tvTemperature = findViewById(R.id.tvTemperature)
        pbTemperature = findViewById(R.id.pbTemperature)
        tvHumidity = findViewById(R.id.tvHumidity)
        pbHumidity = findViewById(R.id.pbHumidity)
        tvSoil = findViewById(R.id.tvSoil)
        pbSoil = findViewById(R.id.pbSoil)
        tvLight = findViewById(R.id.tvLight)
        pbLight = findViewById(R.id.pbLight)
        tvPumpStatus = findViewById(R.id.tvPumpStatus)
        btnPumpIndicator = findViewById(R.id.btnPumpIndicator)


        // üîπ Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùºÎ°ú Î¨∏ÏÑú Ï†ëÍ∑º
        //val email = auth.currentUser?.email ?: return

        // üîπ farmName Î∂àÎü¨Ïò§Í∏∞
        db.collection("users").document(email)
            .get()
            .addOnSuccessListener { snapshot ->
                val farmName = snapshot.getString("farmName") ?: "ÎÇ¥ Ïä§ÎßàÌä∏Ìåú"
                tvFarmName.text = farmName
            }
            .addOnFailureListener {
                tvFarmName.text = "Ïä§ÎßàÌä∏Ìåú Ï†ïÎ≥¥ ÏóÜÏùå"
            }




        // üîπ Ïã§ÏãúÍ∞Ñ Ïò®ÎèÑ ÏàòÏã†
//        db.collection("users")
//            .document(email)
//            .addSnapshotListener { snapshot, error ->
//                if (error != null || snapshot == null || !snapshot.exists()) return@addSnapshotListener
//
//                val temp = snapshot.getDouble("temperature") ?: return@addSnapshotListener
//                updateTemperatureUI(temp)
//            }
        db.collection("users").document(email)
            .addSnapshotListener { snapshot, error ->
                if (error != null || snapshot == null || !snapshot.exists()) return@addSnapshotListener

                val temp = snapshot.getDouble("temperature")
                val humidity = snapshot.getDouble("humidity")
                val soil = snapshot.getDouble("soilMoisture")
                val light = snapshot.getDouble("light")
                val pump = snapshot.getString("pumpStatus") ?: "unknown"



                temp?.let { updateTemperatureUI(it) }
                humidity?.let { updateHumidityUI(it) }
                soil?.let { updateSoilUI(it) }
                light?.let { updateLightUI(it) }
                tvPumpStatus.text = "ÌéåÌîÑ ÏÉÅÌÉú: ${pump.uppercase()}"

                if (pump == "on") {
                    btnPumpIndicator.setBackgroundColor(Color.parseColor("#66BB6A")) // Ï¥àÎ°ù
                } else {
                    btnPumpIndicator.setBackgroundColor(Color.parseColor("#EF5350")) // Îπ®Í∞ï
                }
            }


    }

    private fun updateTemperatureUI(temp: Double) {
        val progress = temp.toInt().coerceIn(0, 50)
        pbTemperature.progress = progress
        tvTemperature.text = "Ïò®ÎèÑ: %.1f¬∞C".format(temp)

        val color = when {
            temp < 10 -> Color.parseColor("#42A5F5") // ÌååÎûë
            temp < 25 -> Color.parseColor("#66BB6A") // Ï¥àÎ°ù
            else -> Color.parseColor("#EF5350") // Îπ®Í∞ï
        }

        pbTemperature.progressTintList = ColorStateList.valueOf(color)
    }
    private fun updateHumidityUI(value: Double) {
        val clamped = value.coerceIn(0.0, 100.0)
        pbHumidity.progress = clamped.toInt()
        tvHumidity.text = "ÏäµÎèÑ: %.1f%%".format(clamped)

        val alpha = (clamped * 255 / 100).toInt().coerceIn(0, 255)
        val color = Color.argb(255, 0, 105, alpha)
        pbHumidity.progressTintList = ColorStateList.valueOf(color)
    }


    private fun updateSoilUI(value: Double) {
        val clamped = value.coerceIn(0.0, 100.0)
        pbSoil.progress = clamped.toInt()
        tvSoil.text = "ÌÜ†Ïñë ÏàòÎ∂Ñ: %.1f%%".format(clamped)
        pbSoil.progressTintList = ColorStateList.valueOf(Color.parseColor("#8BC34A"))
    }


    private fun updateLightUI(value: Double) {
        val lx = value.toInt().coerceIn(0, 1000)
        val percent = (lx * 100 / 1000).coerceIn(0, 100)
        pbLight.progress = percent
        tvLight.text = "Ï°∞ÎèÑ: ${lx}lx"

        // Î∞ùÍ∏∞Ïóê Îî∞Îùº ÌöåÏÉâ ‚Üí Ìù∞ÏÉâÏúºÎ°ú
        val brightness = (percent * 255 / 100).coerceIn(0, 255)
        val color = Color.rgb(brightness, brightness, brightness)
        pbLight.progressTintList = ColorStateList.valueOf(color)
    }

//    private fun startPollingLatestPhoto() {
//        val handler = Handler(Looper.getMainLooper())
//        val runnable = object : Runnable {
//            override fun run() {
//                //val email = auth.currentUser?.email ?: return
//                db.collection("users").document(email)
//                    .collection("latestPhoto")
//                    .document("current")
//                    .get()
//                    .addOnSuccessListener { doc ->
//                        val base64 = doc.getString("imageBase64")
//                        base64?.let {
//                            val pure = it.substringAfter("base64,", "").replace("\\s".toRegex(), "")
//                            try {
//                                val bitmap = base64ToBitmap(pure)
//                                imgLatestPhoto.setImageBitmap(bitmap)
//                            } catch (e: Exception) {
//                                e.printStackTrace()
//                            }
//                        }
//                    }
//                handler.postDelayed(this, 5 * 60 * 1000)
//            }
//        }
//        handler.post(runnable)
//    }
private fun startPollingLatestPhoto() {
    val handler = Handler(Looper.getMainLooper())
    val runnable = object : Runnable {
        override fun run() {
            val email = FirebaseAuth.getInstance().currentUser?.email ?: return

            FirebaseFirestore.getInstance().collection("users")
                .document(email)
                .collection("photos")
                .orderBy("timestamp", Query.Direction.DESCENDING)
                .limit(1)
                .get()
                .addOnSuccessListener { docs ->
                    if (!docs.isEmpty) {
                        val base64 = docs.first().getString("imageBase64")
                        base64?.let {
                            val pure = it.substringAfter("base64,", "").replace("\\s".toRegex(), "")
                            val decoded = Base64.decode(pure, Base64.DEFAULT)
                            val bitmap = BitmapFactory.decodeByteArray(decoded, 0, decoded.size)
                            findViewById<ImageView>(R.id.imgLatestPhoto).setImageBitmap(bitmap)
                        }
                    }
                }

            handler.postDelayed(this, 30 * 1000)
        }
    }

    handler.post(runnable)
}

    private fun schedulePhotoCopyAtUserTime() {
        photoCopyHandler?.removeCallbacks(photoCopyRunnable!!) // Ïù¥Ï†Ñ ÌÉÄÏù¥Î®∏ Ï†úÍ±∞

        photoCopyHandler = Handler(Looper.getMainLooper())
        val handler = photoCopyHandler!!

        db.collection("users").document(email).get()
            .addOnSuccessListener { userDoc ->
                val timeStr = userDoc.getString("photoTime") ?: return@addOnSuccessListener
                val (hour, min) = timeStr.split(":").map { it.toInt() }

                val cal = Calendar.getInstance().apply {
                    set(Calendar.HOUR_OF_DAY, hour)
                    set(Calendar.MINUTE, min)
                    set(Calendar.SECOND, 0)
                }

                // Îã§Ïùå Ïã§ÌñâÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
                var delayMillis = cal.timeInMillis - System.currentTimeMillis()
                if (delayMillis < 0) {
                    // Ïù¥ÎØ∏ Ïò§Îäò ÏãúÍ∞ÑÏù¥ ÏßÄÎÇ¨ÏúºÎ©¥ ÎÇ¥ÏùºÎ°ú ÏòàÏïΩ
                    delayMillis += 24 * 60 * 60 * 1000
                }

                photoCopyRunnable = Runnable {
                    copyLatestPhotoToGallery(email)
                    // ÎÇ¥Ïùº Îã§Ïãú Îì±Î°ù
                    schedulePhotoCopyAtUserTime()
                }

                handler.postDelayed(photoCopyRunnable!!, delayMillis)
            }
    }

    private fun copyLatestPhotoToGallery(email: String) {
        db.collection("users").document(email)
            .collection("photos")
            .orderBy("timestamp", Query.Direction.DESCENDING)
            .limit(1)
            .get()
            .addOnSuccessListener { docs ->
                if (!docs.isEmpty) {
                    val doc = docs.first()
                    val base64 = doc.getString("imageBase64") ?: return@addOnSuccessListener
                    val timestamp = Timestamp.now()
                    val dateKey = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

                    val galleryRef = db.collection("users").document(email)
                        .collection("gallery").document(dateKey)

                    galleryRef.set(
                        mapOf(
                            "imageBase64" to base64,
                            "timestamp" to timestamp
                        )
                    )
                }
            }
    }



//    private fun copyLatestPhotoToGallery(email: String) {
//        val latestRef = db.collection("users").document(email)
//            .collection("latestPhoto").document("current")
//
//        latestRef.get().addOnSuccessListener { doc ->
//            val base64 = doc.getString("imageBase64") ?: return@addOnSuccessListener
//            val timestamp = Timestamp.now()
//            val dateKey = SimpleDateFormat("yyyy-MM-dd_HH:mm", Locale.getDefault()).format(Date())
//
//            val galleryRef = db.collection("users").document(email)
//                .collection("photos").document(dateKey)
//
//            galleryRef.set(
//                mapOf(
//                    "imageBase64" to base64,
//                    "timestamp" to timestamp
//                )
//            )
//        }
//    }



}
